import tkinter as tk
from time import sleep
from random import *

sLi = False
saved = [] # list for saved objects
saves = 0 # used for incrementing saves once the saved list = 10 long
translated = [] # used to keep track of all translated words in order to test knowledge
mastery = [] # used to keep track of mastery progress for each translated term
learned = [] # used to keep track of all mastered terms

def testKnowledge():

    def testLetter(i, Letter, letterButton):
        text = testBox.get() # uses the text box to get the testing input
        text = text.upper() # makes the text upper case to match expected input
        if text == li[i]: # if the text is correct
            notif = tk.Toplevel() # make a new window
            correctLabel = tk.Label(notif, text="That is correct!", font=("Arial", 25)) # Label for window
            correctLabel.grid(row=0, column=0)
            correctClear = tk.Button(notif, text="Ok", command=notif.destroy) # Button to remove window
            correctClear.grid(row=1, column=0)
            Letter.destroy() # Removes previous letter
            letterButton.destroy() # Replaces button to remove letter with a new one
            if i != len(li)-1: # as long as the word is still being tested
                i+=1
                img = tk.PhotoImage(file=rf"C:\Users\spych\OneDrive\Desktop\CSC-132\Letters\letters{li[i]}.png") # creates the image
                Letter = tk.Label(Tester, height=400, width=500, image=img) # uses the image
                Letter.grid(row=0,column=0)# displays the image
                textLetter = tk.Label(Tester, height=5, width=15, text=f"What letter is this?",font=("Arial", 25))
                textLetter.grid(row=1, column=0)
                letterButton = tk.Button(Tester, text="Check", command=lambda:testLetter(i, Letter, letterButton)) # next letter button
                letterButton.grid(row=2,column=1)
                Tester.pack()
            else:
                m = 0
                Tester.destroy() # destroys the GUI when word is finished
                if len(mastery) == 0: # if the mastery list is empty
                    mastery.append(term)
                    Scrizlet.deiconify() # Bring back Scrizlet
                else:
                    for t in (0,len(mastery)-1): # go through the entire mastery list
                        if mastery[t] == term: # if the term is found
                            m += 1 
                            if m == 5: # if the term is found 5 times
                                Mastered = tk.Toplevel()
                                masteredLabel = tk.Label(Mastered, height=20, width=50, text=f"You have successfully mastered the term '{term}.'\nCongratulations!\n")
                                masteredLabel.grid(row=0,column=0)
                                masteredButton = tk.Button(Mastered, text="Ok.", command=lambda:[Mastered.destroy(),Scrizlet.deiconify()])
                                masteredButton.grid(row=1, column=0)
                                learned.append(term) # add the term to the learned list
                            else:
                                mastery.append(term) # append to mastery list
                                Scrizlet.deiconify() # bring back Scrizlet
        else: # if the letter is incorrect
            notif = tk.Toplevel()
            incorrectLabel = tk.Label(notif, text="That is incorrect!", font=("Arial", 25))
            incorrectLabel.grid(row=0, column=0)
            incorrectClear = tk.Button(notif, text="Ok", command=notif.destroy())
            incorrectClear.grid(row=1, column=0)
    
    if len(translated) < 3: # If you have translated less than three words
        pass
    else:
        Scrizlet.withdraw() # Take away Scrizlet
        tested = randint(0, len(translated)-1) # what term are we testing?
        term = translated[tested] 
        i = 0
        li = list(term) # takes the input from text box and turns it into a list
        for l in range(0,len(li)):
            li[l] = li[l].upper()
            print(li) # debugging, remove later
        Tester = tk.Toplevel() #sets up a separate GUI for spelling
        Tester.title("Test Your Knowledge!")
        img = tk.PhotoImage(file=rf"C:\Users\spych\OneDrive\Desktop\CSC-132\Letters\letters{li[i]}.png")
        Letter = tk.Label(Tester, height=400, width=500, image=img)
        Letter.grid(row=0,column=0)
        textLetter = tk.Label(Tester, height=5, width=15, text=f"What letter is this?", font=("Arial", 25))
        textLetter.grid(row=1, column=0)
        testBox = tk.Entry(Tester, width=30)
        testBox.grid(row=2, column=0)
        letterButton = tk.Button(Tester, text = "Check", command=lambda:testLetter(i, Letter, letterButton))
        letterButton.grid(row=2,column=1)
        Tester.pack()

def pteradactyl(x): # finger spelling function
    def nextLetter(i, Letter, letterButton):
        Letter.destroy() # Removes previous letter
        letterButton.destroy() # Replaces button to remove letter with a new one
        if i != len(li)-1:
            i+=1
            if li[i] == " ":
                i+=1
            img = tk.PhotoImage(file=rf"C:\Users\spych\OneDrive\Desktop\CSC-132\Letters\letters{li[i]}.png")
            Letter = tk.Label(Translator, height=400, width=500, image=img)
            Letter.grid(row=0,column=0)# displays specific later
            Letter.grid(row=0,column=0)
            textLetter = tk.Label(Translator, height=5, width=10, text=f"{li[i]}",font=("Arial", 25))
            textLetter.grid(row=1, column=0)
            letterButton = tk.Button(Translator, text="Next Letter", command=lambda:nextLetter(i, Letter, letterButton)) # next letter button
            letterButton.grid(row=2,column=0)
            Translator.pack()
        else:
            Translator.destroy() # destroys the GUI when word is finished
            testKnowledge()

    i = 0
    li = list(x) # takes the input from text box and turns it into a list
    for l in range(0,len(li)):
        li[l] = li[l].upper()
    print(li) # debugging, remove later
    Translator = tk.Toplevel() #sets up a separate GUI for spelling
    img = tk.PhotoImage(file=rf"C:\Users\spych\OneDrive\Desktop\CSC-132\Letters\letters{li[i]}.png")
    Letter = tk.Label(Translator, height=400, width=500, image=img)
    Letter.grid(row=0,column=0)
    textLetter = tk.Label(Translator, height=5, width=10, text=f"{li[i]}", font=("Arial", 25))
    textLetter.grid(row=1, column=0)
    letterButton = tk.Button(Translator, text = "Next Letter", command=lambda:nextLetter(i, Letter, letterButton))
    letterButton.grid(row=2,column=0)
    Translator.pack()

def mainScreen():

    def getInput(): # Function to recieve the input via text box
        inList = False
        text = entry.get()
        print("Input: ", text)
        if len(translated) == 0:
            translated.append(text)
        else:
            for i in (0, len(translated)-1):
                if translated[i] == text:
                    inList = True
            if len(learned)==0:
                pass
            else:
                for i in (0, len(learned)-1):
                    if learned[i] == text:
                        inList = True
            if inList == True:
                pass
            else:
                translated.append(text)
        print(translated)
        pteradactyl(text) # uses the input to finger spell

    def save():
        global saves # calls the global "saves"
        text = entry.get() # Uses text box input
        if len(saved) != 5: 
            saved.append(text) # Appends saved object to saved list
        else:
            saved[saves] = text # Begins the overwriting of the saved list using incrementation of "saves"
            if (saves == 4):
                saves = 0
            else:
                saves += 1
        if sLi == True: # if the Saved List has already been accessed, update the saved list when a new save occurs
            savedList()
        print(saved) # debugging, remove later

    def savedList():
        global sLi 
        sLi = True # Used to automatically update the list every time you save something new.

        if len(saved)==0: #If you have nothing saved...
            notif = tk.Toplayer()
            notifLabel = tk.Label(notif, text="You do not have any saved terms!", font=("Arial",25))
            notifLabel.grid(row=0, column=0)
            notifButton = tk.Button(notif, text="Ok.", command=notif.destroy)
            notifButton.grid(row=1, column=0)
        else: #if you have something saved
            entry.grid(row=0, column=1) # Moves every aspect of the GUI over
            Translate.grid(row=0, column=3)
            Save.grid(row=1, column=1)
            Memory.grid(row=1, column=2)

        if len(saved)==1: # Creates a button for each saved object if the length of the saved items is 1
            button1 = tk.Button(Scrizlet, text=saved[0], command=lambda:(pteradactyl(button1.cget("text"))))
            button1.grid(row=0, column=0)
        elif len(saved)==2: # Creates a button for each saved object if the length of the saved items is 2
            try: # Destroys buttons and creates new ones to prevent doubling up.
                button1.destroy()
                button1 = tk.Button(Scrizlet, text=saved[0], command=lambda:(pteradactyl(button1.cget("text"))))
                button1.grid(row=0, column=0)
                button2 = tk.Button(Scrizlet, text=saved[1], command=lambda:(pteradactyl(button2.cget("text"))))
                button2.grid(row=1, column=0)
            except: # if no double ups, create buttons
                button1 = tk.Button(Scrizlet, text=saved[0], command=lambda:(pteradactyl(button1.cget("text"))))
                button1.grid(row=0, column=0)
                button2 = tk.Button(Scrizlet, text=saved[1], command=lambda:(pteradactyl(button2.cget("text"))))
                button2.grid(row=1, column=0)
        elif len(saved)==3: # Creates a button for each saved object if the length of the saved items is 3
            try: # Destroys buttons and creates new ones to prevent doubling up
                button1.destroy()
                button2.destroy()
                button1 = tk.Button(Scrizlet, text=saved[0], command=lambda:(pteradactyl(button1.cget("text"))))
                button1.grid(row=0, column=0)
                button2 = tk.Button(Scrizlet, text=saved[1], command=lambda:(pteradactyl(button2.cget("text"))))
                button2.grid(row=1, column=0)
                button3 = tk.Button(Scrizlet, text=saved[2], command=lambda:(pteradactyl(button3.cget("text"))))
                button3.grid(row=2, column=0)
            except: # If no double ups, create buttons
                button1 = tk.Button(Scrizlet, text=saved[0], command=lambda:(pteradactyl(button1.cget("text"))))
                button1.grid(row=0, column=0)
                button2 = tk.Button(Scrizlet, text=saved[1], command=lambda:(pteradactyl(button2.cget("text"))))
                button2.grid(row=1, column=0)
                button3 = tk.Button(Scrizlet, text=saved[2], command=lambda:(pteradactyl(button3.cget("text"))))
                button3.grid(row=2, column=0)
        elif len(saved)==4: # Creates a button for each saved object if the length of the saved items is 4
            try: # Destroys buttons and creates new ones to avoid doubling up
                button1.destroy()
                button2.destroy()
                button3.destroy()
                button1 = tk.Button(Scrizlet, text=saved[0], command=lambda:(pteradactyl(button1.cget("text"))))
                button1.grid(row=0, column=0)
                button2 = tk.Button(Scrizlet, text=saved[1], command=lambda:(pteradactyl(button2.cget("text"))))
                button2.grid(row=1, column=0)
                button3 = tk.Button(Scrizlet, text=saved[2], command=lambda:(pteradactyl(button3.cget("text"))))
                button3.grid(row=2, column=0)
                button4 = tk.Button(Scrizlet, text=saved[3], command=lambda:(pteradactyl(button4.cget("text"))))
                button4.grid(row=3, column=0)
            except: # If no double ups, create buttons
                button1 = tk.Button(Scrizlet, text=saved[0], command=lambda:(pteradactyl(button1.cget("text"))))
                button1.grid(row=0, column=0)
                button2 = tk.Button(Scrizlet, text=saved[1], command=lambda:(pteradactyl(button2.cget("text"))))
                button2.grid(row=1, column=0)
                button3 = tk.Button(Scrizlet, text=saved[2], command=lambda:(pteradactyl(button3.cget("text"))))
                button3.grid(row=2, column=0)
                button4 = tk.Button(Scrizlet, text=saved[3], command=lambda:(pteradactyl(button4.cget("text"))))
                button4.grid(row=3, column=0)
        elif len(saved)==5: # Creates a button for each saved object if the length of the saved items is 5
            try: # Destroys buttons and creates new ones to prevent doubling up
                button1.destroy()
                button2.destroy()
                button3.destroy()
                button4.destroy()
                button1 = tk.Button(Scrizlet, text=saved[0], command=lambda:(pteradactyl(button1.cget("text"))))
                button1.grid(row=0, column=0)
                button2 = tk.Button(Scrizlet, text=saved[1], command=lambda:(pteradactyl(button2.cget("text"))))
                button2.grid(row=1, column=0)
                button3 = tk.Button(Scrizlet, text=saved[2], command=lambda:(pteradactyl(button3.cget("text"))))
                button3.grid(row=2, column=0)
                button4 = tk.Button(Scrizlet, text=saved[3], command=lambda:(pteradactyl(button4.cget("text"))))
                button4.grid(row=3, column=0)
                button5 = tk.Button(Scrizlet, text=saved[4], command=lambda:(pteradactyl(button5.cget("text"))))
                button5.grid(row=4, column=0)
            except: # If no double ups, create new buttons
                button1 = tk.Button(Scrizlet, text=saved[0], command=lambda:(pteradactyl(button1.cget("text"))))
                button1.grid(row=0, column=0)
                button2 = tk.Button(Scrizlet, text=saved[1], command=lambda:(pteradactyl(button2.cget("text"))))
                button2.grid(row=1, column=0)
                button3 = tk.Button(Scrizlet, text=saved[2], command=lambda:(pteradactyl(button3.cget("text"))))
                button3.grid(row=2, column=0)
                button4 = tk.Button(Scrizlet, text=saved[3], command=lambda:(pteradactyl(button4.cget("text"))))
                button4.grid(row=3, column=0)
                button5 = tk.Button(Scrizlet, text=saved[4], command=lambda:(pteradactyl(button5.cget("text"))))
                button5.grid(row=4, column=0)

    entry = tk.Entry(Scrizlet, width=30) # sets up the text box
    entry.grid(row=0,column=0)

    Translate = tk.Button(Scrizlet, text="Translate", command=getInput) # creates the button to take the text box input
    Translate.grid(row=0,column=1)
    Save = tk.Button(Scrizlet, text="Save For Later", command=save) # creates the save button
    Save.grid(row=1, column=0)
    Memory = tk.Button(Scrizlet, text="Saved", command=savedList) # creates the button to view saved items
    Memory.grid(row=1, column=1)

Scrizlet = tk.Tk() # set up rudimentary GUI
Scrizlet.title("Scrizlet")

# Create the disclaimer and button to remove disclaimer
Disclaimer = tk.Label(Scrizlet, text="NOTE: \nThis program's sole purpose is to help its users learn ASL.\n" \
"Anyone who wishes to learn ASL is strongly encouraged\nto research Deaf Culture.\n \n" \
"Please also note, at its current state, the program is only\n capable of finger spelling, prone to change in the near future." \
"\nThank you.\n", height=10, width=50, font=("Arial", 25))
Disclaimer.grid(row=0, column=0)
DiscClear = tk.Button(Scrizlet, text="I Understand", font=("Arial", 10), command=lambda:[Disclaimer.destroy(),DiscClear.destroy(), mainScreen()])
DiscClear.grid(row=1, column=0)

Scrizlet.mainloop() # Runs GUI
